# -*- coding: utf-8 -*-
"""
@author: Murat GÃœVEN
"""
import pandas as pd
import numpy as np
from numpy import sin, cos, pi, unravel_index
from scipy.integrate import solve_bvp
from scipy.special import binom

import matplotlib.pyplot as plt
from matplotlib import cm
from mpl_toolkits.mplot3d import axes3d


# Material properties
E = 200e9                       # Modulus of elasticity (N/m^2)
nu = 0.3                        # Poisson's ratio

# Geometric properties
# a = 2.0                         # Plate length in x-direction (m)
# b = 1.0                         # Plate length in y-direction (m)
t0 = 0.05                         # Plate thickness @ y = b/2 (m)
D0 = E*t0**3/(12*(1-nu**2))       # Flexural rigidity of the plate @ y = b/2 (Nm)

# Transverse load intensity (N/m^2)
Q = -10e3                         # minus sign indicates the direction

# Small parameter (unitless)
#e = 0.7                          # must be in range [0, 1)


def t(y): return t0*(1+e*(2*y/b-1))

def D(y): return E*t(y)**3/(12*(1-nu**2))

def Di(i, y): return D0*binom(3, i)*((2*y/b-1))**i

def Diy(i, y):
    if(i >= 1): return D0*binom(3, i)*(i)*((2*y/b-1))**(i-1)*(2/b)
    else: return np.zeros((n_nodesY,))
    
def Diyy(i,y):
    if(i >= 2): return D0*binom(3, i)*(i)*(i-1)*((2*y/b-1))**(i-2)*(2/b)**2
    else: return np.zeros((n_nodesY,))


# Calculate deflection, curvatures, moments, stresses, strains...
def Analyze(N):
    results = np.zeros((18, n_nodesY, n_nodesX))
    W, Wxx, Wyy, Wxy, Mx, My, Mxy, Sxx, Syy, Sxy, S1, S2, Svm, Exx, Eyy, Exy, E1, E2 = results[:]
    
    x = np.linspace(0, a, n_nodesX)
    y = np.linspace(0, b, n_nodesY)
    
    Ys = np.zeros((3, N+1, 5, n_nodesY))
    for k in range(3):
        for m in range(1, N+1):
            def calcfkm():
                fkm = np.zeros((n_nodesY))
                if ( k==0 and m%2 != 0):
                    fkm = 4*Q/(m*pi*D0)*np.ones((n_nodesY,))
                else:
                    for i in range(1, k+1):
                        Y, Yy, Yyy, Yyyy, Yyyyy = Ys[k-i][m]
                        A = Di(i,y)*Yyyyy + 2*Diy(i,y)*Yyyy-2*(m*pi/a)**2*Diy(i,y)*Yy
                        B = (Diyy(i,y) - 2*Di(i,y)*(m*pi/a)**2)*Yyy
                        C = (Di(i,y)*(m*pi/a)**4-nu*(m*pi/a)**2*Diyy(i,y))*Y
                        fkm += -1/D0*(A+B+C)
                return fkm
        
            def dU_dy(y,U):
                if U.shape != (4, n_nodesY):
                    fkm = np.delete(calcfkm(),len(calcfkm())-1)
                else:
                    fkm = calcfkm()
                return np.array([U[1], U[2], U[3], fkm + 2*(m*pi/a)**2*U[2]-(m*pi/a)**4*U[0]])
            
            def BCs(y0, yb):
                Y0, Y0y, Y0yy, Y0yyy = y0
                Yb, Yby, Ybyy, Ybyyy = yb
                return [Y0, Y0yy, Yb, Ybyy]    # Simply supported @ y=0 and y=b
                #return [Y0, Y0y, Yb, Yby]     # Fixed supported  @ y=0 and y=b
            
            Y_guess = np.zeros((4,n_nodesY))   #solve_ivp(dU_dy, (0,b), [0,1,0,1], t_eval=y, vectorized=False)
            sol = solve_bvp(dU_dy, BCs, y, Y_guess,max_nodes=n_nodesY, verbose=0)
            
            Y, Yy, Yyy, Yyyy = sol.y
            Yyyyy = sol.yp[3]
            
            
            Ys[k][m] = np.array([Y, Yy, Yyy, Yyyy, Yyyyy])

            #----Deflection----#
            W += np.outer(Y, sin(m*pi/a*x))*(e**k)

            #----Slopes----#
#             Wx += np.outer(Y,cos(m*pi/a*x))*(m*pi/a)*(e**k)
#             Wy += np.outer(Yy,sin(m*pi/a*x))*(e**k)
            
            #----Curvatures----#     
            Wxx += np.outer(Y,-sin(m*pi/a*x))*(m*pi/a)**2*(e**k)
            Wyy += np.outer(Yyy,sin(m*pi/a*x))*(e**k)
            Wxy += np.outer(Yy,cos(m*pi/a*x))*(m*pi/a)*(e**k)
  
    #----Moments----#
    Mx += -(D(y)*(Wxx+nu*Wyy).T).T
    My += -(D(y)*(Wyy+nu*Wxx).T).T
    Mxy += -(D(y)*(1-nu)*Wxy.T).T

    z = t(y)/2
    #----Strains----# 
    Exx += -(z*Wxx.T).T
    Eyy += -(z*Wyy.T).T
    Exy += -2*(z*Wxy.T).T
   
    #----Stresses----# 
    Sxx += E/(1-nu**2)*(Exx+nu*Eyy)
    Syy += E/(1-nu**2)*(Eyy+nu*Exx)
    Sxy += E/(2*(1+nu))*Exy
    
    #----Principal stresses----#
    S1 += (Sxx+Syy)/2 + np.sqrt(((Sxx-Syy)/2)**2 + Sxy**2)
    S2 += (Sxx+Syy)/2 - np.sqrt(((Sxx-Syy)/2)**2 + Sxy**2)
    
    #----Von Mises stress----#
    Svm += np.sqrt(S1**2-S1*S2+S2**2)
    
    #----Principal strains----#
    E1 += (Exx+Eyy)/2 + np.sqrt(((Exx-Eyy)/2)**2 + Exy**2)
    E2 += (Exx+Eyy)/2 - np.sqrt(((Exx-Eyy)/2)**2 + Exy**2)
   
    
    
    return results


titles = ["$w$", "$w_{xx}$", "$w_{yy}$", "$w_{xy}$","$M_{x}$", "$M_{y}$", "$M_{xy}$", "$\sigma_{xx}$","$\sigma_{yy}$",
          "$\sigma_{xy}$","$\sigma_{1}$", "$\sigma_{2}$", "$\sigma_{VM}$", "$\epsilon_{xx}$","$\epsilon_{yy}$",
          "$\epsilon_{xy}$","$\epsilon_{1}$","$\epsilon_{2}$"]

def PlotTabular():
    x = np.linspace(0, a, n_nodesX)
    y = np.linspace(0, b, n_nodesY)
    
    X,Y = np.meshgrid(x,y)
    
    rows, cols = (3,6)
    fig, ax = plt.subplots(rows,cols)
    for i in range(rows):
        for j in range(cols):
            ax[i,j].imshow(results[j+i*cols], cmap='Spectral_r',origin='lower', extent=[0,a,0,b])
            #CS = ax[i,j].contour(X,Y, results[j+i*cols],16,extent=[0,a,0,b])
            #ax[i,j].clabel(CS, inline=1, fontsize=10)
            ax[i,j].set_title(titles[j+i*cols], fontsize=12)
            #ax[i,j].set_xlabel("y")
            #ax[i,j].set_ylabel("x")
            
    plt.tight_layout(pad=0, w_pad=0, h_pad=0)
    fig.set_size_inches((2*(cols+2)*a,2*(rows+1)*b), forward=False)
    #plt.savefig(f"a={a},b={b},e={e}"+".png",dpi=300)
    #plt.show()

def Plot3D(array):
    ax = plt.axes(projection="3d")

    x = np.linspace(0, a, n_nodesX)
    y = np.linspace(0, b, n_nodesY)
    X, Y = np.meshgrid(x, y)

    ax.plot_surface(Y, X, array.T, cmap=cm.coolwarm)
    ax.set_xlabel(r'$x (m)$')
    ax.set_ylabel('$y (m)$')
    ax.zaxis.set_rotate_label(False)  # disable automatic rotation
    ax.set_zlabel('$w (mm)$')
    
    ax.set_xlim3d(0, a)
    ax.set_ylim3d(0, b)
    #ax.set_zlim3d(-t0*1e3/2, t0*1e3/2)
    plt.show()

def findMax(array):
    maxVal = np.amax(np.abs(array))
    maxVal_ind = unravel_index(np.abs(array).argmax(),array.shape)
    return {"val": maxVal, "x": maxVal_ind[1]*a/(n_nodesX-1), "y": maxVal_ind[0]*b/(n_nodesY-1)}



Ws = np.array([])
Mxs = np.array([])
Mys = np.array([])
Mxys = np.array([])
ratio = np.array([])
global a, b, e, n_nodesX, n_nodesY
for e in np.linspace(0,1,6):
    
    a = 1.0
    b = 1.0
    
    n_nodesX = int(a/0.001)+1
    n_nodesY = int(b/0.001)+1
    
    p1Y, p1X = (int((n_nodesY-1)/4),int((n_nodesX-1)/2))
    p2Y, p2X = (int((n_nodesY-1)/2),int((n_nodesX-1)/2))
    row, col = (int(3*(n_nodesY-1)/4),int((n_nodesX-1)/2))
    
    results = Analyze(20)
    PlotTabular()
    #Plot3D(results[0]*1E3)
    
    
    print("Start")
    print("W(mm)",findMax(results[0]*1e3))
    
    print("Mx(Nm/m)",findMax(results[4]))
    print("My(Nm/m)",findMax(results[5]))
    print("Mxy(Nm/m)",findMax(results[6]))
    
    print("Sx(MPa)",findMax(results[7]*1e-6))
    print("Sy(MPa)",findMax(results[8]*1e-6))
    print("Sxy(MPa)",findMax(results[9]*1e-6))
    print("Svm(MPa)",findMax(results[12]*1e-6))
    
    print("Exx",findMax(results[13]))
    print("Eyy",findMax(results[14]))
    print("Exy",findMax(results[15]))
    print("Finish")
    
    ratio = np.append(ratio,b/a)
    Ws = np.append(Ws,round(results[0][row][col]*1e6,3))
    Mxs = np.append(Mxs,round(results[4][row][col],3))
    Mys = np.append(Mys,round(results[5][row][col],3))
    #Mxys = np.append(Mxys,results[6][row][col])
    
        
d = {'b/a':ratio,'W(mm)(1e-3)': Ws, 'Mx(Nm/m)': Mxs, 'My(Nm/m)': Mys}
df = pd.DataFrame(data=d)






